
# This is the ssh client system-wide configuration file.  See
# ssh_config(5) for more information.  This file provides defaults for
# users, and the values can be changed in per-user configuration files
# or on the command line.

# Configuration data is parsed as follows:
#  1. command line options
#  2. user-specific file
#  3. system-wide file
# Any configuration value is only changed the first time it is set.
# Thus, host-specific definitions should be at the beginning of the
# configuration file, and defaults at the end.

# Site-wide defaults for some commonly used options.  For a comprehensive
# list of available options, their meanings and defaults, please see the
# ssh_config(5) man page.

# Host *
#   ForwardAgent no
#   ForwardX11 no
#   ForwardX11Trusted yes
#   RhostsRSAAuthentication no
#   RSAAuthentication yes
#   PasswordAuthentication yes
#   HostbasedAuthentication no
#   GSSAPIAuthentication no
#   GSSAPIDelegateCredentials no
#   GSSAPIKeyExchange no
#   GSSAPITrustDNS no
#   BatchMode no
#   CheckHostIP yes
#   AddressFamily any
#   ConnectTimeout 0
#   StrictHostKeyChecking ask
#   IdentityFile ~/.ssh/identity
#   IdentityFile ~/.ssh/id_rsa
#   IdentityFile ~/.ssh/id_dsa
#   Port 22
#   Protocol 2,1
#   Cipher 3des
#   Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc
#   MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160
#   EscapeChar ~
#   Tunnel no
#   TunnelDevice any:any
#   PermitLocalCommand no
#   VisualHostKey no
#   ProxyCommand ssh -q -W %h:%p gateway.example.com

<%
# Process a boolean value
def do_boolean(option, val)
    if val then
        return "    " + option + " yes\n"
    end
    return "    " + option + " no\n"
end

# Process a simple text value
def do_text(option, val)
    return "    " + option + " " + val + "\n"
end

# Process the "ciphers" option
def do_ciphers(name, val)
    if ! val.kind_of?(Array) then
        err_quit(name, 'invalid ciphers: must be an array')
    end

    delim = ""
    line  = ""
    val.sort.each do |cipher|
        line += delim + cipher
        delim = ","
    end
    return "    Ciphers " + line + "\n"
end

# Process the "port" option
def do_port(name, val)
    if ( val.to_i > 0 ) then
        return "    Port " + val.to_s + "\n"
    else
        err_quit(name, 'invalid port (' + val + '): must be integer' )
    end
end

# Process the "protocol" option
def do_protocol(name, val)
    val = val.to_s
    if (val != '1' && val != '2') then
        err_quit(name, 'invalid protocol (' + val + '): must be 1 or 2' )
    end
    return "    Protocol " + val + "\n"
end

# Process the "sendenv" option
def do_sendenv(name, val)
    if ! val.kind_of?(Array) then
        err_quit(name, 'invalid sendenv: must be an array')
    end

    delim = ""
    line  = ""
    val.sort.each do |env|
        line += delim + env
        delim = " "
    end
    return "    SendEnv " + line + "\n"
end

def process_config_hash(name, data)
    result = ""
    data.sort.map do |var,val|
        config_line = case var.downcase
            when "ciphers" then
                do_ciphers( name, val )
            when "forwardx11" then
                do_boolean( "ForwardX11", val )
            when "forwardx11trusted" then
                do_boolean( "ForwardX11Trusted", val )
            when "hostname" then
                do_text( "Hostname", val )
            when "passwordauthentication" then
                do_boolean( "PasswordAuthentication", val )
            when "port" then
                do_port( name, val )
            when "protocol" then
                do_protocol( name, val )
            when "sendenv" then
                do_sendenv( name, val )
            when "stricthostkeychecking" then
                do_boolean( "StrictHostKeyChecking", val )
            else
                "    # Puppet has encountered an unknown option: " + var + "\n"
        end
        result += config_line
    end
    return result
end

### err_quit - Helper function to display an error message and fail
def err_quit(name,text)
    message = "ERROR: Host[" + name + "]: "
    message = message + text
    scope.function_fail( message )
end
-%>
#
# Custom Host blocks
#
<%
host.sort.map do |string,data|
    if ( string == "*" ) then
        next
    end
-%>
Host <%= string %>
<%= process_config_hash(string, data) %>
<% end -%>
#
# Default Host block
#
<%
# We'll set the default cipher list if one wasn't provided
if ! host["*"].has_key?("ciphers") 
    host["*"]["ciphers"] = [ 'aes256-ctr', 'aes192-ctr', 'aes128-ctr' ]
end
-%>
Host *
<% if host["*"] -%>
<%= process_config_hash("*", host["*"]) %>
<% else -%>
    Ciphers aes256-ctr,aes192-ctr,aes128-ctr
    ForwardX11 no
    Protocol 2
<% end %>
