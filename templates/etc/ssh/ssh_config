
# This is the ssh client system-wide configuration file.  See
# ssh_config(5) for more information.  This file provides defaults for
# users, and the values can be changed in per-user configuration files
# or on the command line.

# Configuration data is parsed as follows:
#  1. command line options
#  2. user-specific file
#  3. system-wide file
# Any configuration value is only changed the first time it is set.
# Thus, host-specific definitions should be at the beginning of the
# configuration file, and defaults at the end.

# Site-wide defaults for some commonly used options.  For a comprehensive
# list of available options, their meanings and defaults, please see the
# ssh_config(5) man page.

# Host *
#   ForwardAgent no
#   ForwardX11 no
#   ForwardX11Trusted yes
#   RhostsRSAAuthentication no
#   RSAAuthentication yes
#   PasswordAuthentication yes
#   HostbasedAuthentication no
#   GSSAPIAuthentication no
#   GSSAPIDelegateCredentials no
#   GSSAPIKeyExchange no
#   GSSAPITrustDNS no
#   BatchMode no
#   CheckHostIP yes
#   AddressFamily any
#   ConnectTimeout 0
#   StrictHostKeyChecking ask
#   IdentityFile ~/.ssh/identity
#   IdentityFile ~/.ssh/id_rsa
#   IdentityFile ~/.ssh/id_dsa
#   Port 22
#   Protocol 2,1
#   Cipher 3des
#   Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc
#   MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160
#   EscapeChar ~
#   Tunnel no
#   TunnelDevice any:any
#   PermitLocalCommand no
#   VisualHostKey no
#   ProxyCommand ssh -q -W %h:%p gateway.example.com

<%
# Process a boolean value
def do_boolean(name, option, val)
    if !!val != val then
        err_quit(name, 'invalid ' + option.downcase + ': must be a boolean true or false' )
    end
    if val then
        return "    " + option + " yes\n"
    end
    return "    " + option + " no\n"
end

# Process a simple text value
def do_text(option, val)
    return "    " + option + " " + val + "\n"
end

# Process an integer value
def do_integer(name, option, val)
    if val.to_i == 0 then
        err_quit(name, 'inalid ' + option.downcase + ': must be a number' )
    end
    return "    " + option + " " + val + "\n"
end

# Process an integer value that should be within a range
def do_integer_range(name, option, val, min, max)
    if ( val.to_i == 0 || val.to_i < min || val.to_i > max ) then
        err_quit(name, 'inalid ' + option.downcase + ': must be ' + min.to_s + '-' + max.to_s)
    end
    return "    " + option + " " + val + "\n"
end

# Process the "addressfamily" option
def do_addressfamily(name, val)
    if ( val != 'any' && val != 'inet' && val != 'inet6' ) then
        err_quit(name, 'invalid addressfamily (' + val + '): must be any, inet, or inet6' )
    end
    return "    AddressFamily " + val.downcase + "\n"
end

# Process the "cipher" option
def do_cipher(name, val)
    if ( val != "blowfish" && val != "3des" && val != "des" )
        err_quit(name, 'invalid cipher (' + val + ')')
    end
    return "    Cipher " + val + "\n"
end

# Process the "ciphers" option
def do_ciphers(name, val)
    if ! val.kind_of?(Array) then
        err_quit(name, 'invalid ciphers: must be an array')
    end

    valid_ciphers = Hash.new
    valid_ciphers["3des-cbc"] = 1
    valid_ciphers["aes128-cbc"] = 1
    valid_ciphers["aes192-cbc"] = 1
    valid_ciphers["aes256-cbc"] = 1
    valid_ciphers["aes128-ctr"] = 1
    valid_ciphers["aes192-ctr"] = 1
    valid_ciphers["aes256-ctr"] = 1
    valid_ciphers["arcfour128"] = 1
    valid_ciphers["arcfour256"] = 1
    valid_ciphers["arcfour"] = 1
    valid_ciphers["blowfish-cbc"] = 1
    valid_ciphers["cast128-cbc"] = 1

    delim = ""
    line  = ""
    val.sort.each do |cipher|
        if ! valid_ciphers[cipher] then
            err_quit( name, 'invalid cipher in ciphers list (' + cipher + ')')
        end
        line += delim + cipher
        delim = ","
    end
    return "    Ciphers " + line + "\n"
end

# Process the "controlmaster" option
def do_controlmaster(name, val)
    if !!val != val then
        if val.downcase != 'ask' && val.downcase != 'auto' && val.downcase != 'autoask' &&
           val.downcase != 'yes' && val.downcase != 'no' then
            err_quit(name, 'invalid controlmaster (' + val.downcase + ')')
        else
            return "    ControlMaster " + val.downcase + "\n"
        end
    end
    if val then
        return "    ControlMaster yes\n"
    end
    return "    ControlMaster no\n"
end

# Process the "kbdinteractivedevices" option
def do_kbdinteractivedevices(name, val)
    if val != 'bsdauth' && val != 'pam' && val != 'skey' then
        err_quit(name, 'invalid kbdinteractivedevices (' + val + ')')
    end
    return "    KbdInteractiveDevices " + val
end

# Process the "loglevel" option
def do_loglevel(name, val)
    levels = Hash.new
    levels["QUIET"] = 1
    levels["FATAL"] = 1
    levels["ERROR"] = 1
    levels["INFO"]  = 1
    levels["VERBOSE"] = 1
    levels["DEBUG"] = 1
    levels["DEBUG1"] = 1
    levels["DEBUG2"] = 1
    levels["DEBUG3"] = 1

    if !levels[val.upcase] then
        err_quit(name, 'invalid loglevel (' + val.upcase + ')')
    end
    return "    LogLevel " + val.upcase + "\n"
end

# Process the "sendenv" option
def do_sendenv(name, val)
    if ! val.kind_of?(Array) then
        err_quit(name, 'invalid sendenv: must be an array')
    end

    delim = ""
    line  = ""
    val.sort.each do |env|
        line += delim + env
        delim = " "
    end
    return "    SendEnv " + line + "\n"
end

# Process the "stricthostkeychecking" option
def do_stricthostkeychecking(name, val)
    if !!val != val then
        if val.downcase != 'ask' &&
           val.downcase != 'yes' && val.downcase != 'no' then
            err_quit(name, 'invalid stricthostkeychecking (' + val.downcase + ')')
        else
            return "    StrictHostKeyChecking " + val.downcase + "\n"
        end
    end
    if val then
        return "    StrictHostKeyChecking yes\n"
    end
    return "    StrictHostKeyChecking no\n"
end

# Process the "tunnel" option
def do_tunnel(name, val)
    if !!val != val then
        if val.downcase != 'yes' && val.downcase != 'no' &&
           val.downcase != 'point-to-point' && val.downcase != 'ethernet' then
            err_quit(name, 'invalid tunnel (' + val.downcase + ')')
        else
            return "    Tunnel " + val.downcase + "\n"
        end
    end
    if val then
        return "    Tunnel yes\n"
    end
    return "    Tunnel no\n"
end

# Process the "verifyhostkeydns" option
def do_verifyhostkeydns(name, val)
    if !!val != val then
        if val.downcase != 'ask' &&
           val.downcase != 'yes' && val.downcase != 'no' then
            err_quit(name, 'invalid verifyhostkeydns (' + val.downcase + ')')
        else
            return "    VerifyHostKeyDNS " + val.downcase + "\n"
        end
    end
    if val then
        return "    VerifyHostKeyDNS yes\n"
    end
    return "    VerifyHostKeyDNS no\n"
end

# Iterate over the configuration options
def process_config_hash(name, data)
    result = ""
    data.sort.map do |var,val|
        config_line = case var.downcase
            when "addressfamily" then
                do_addressfamily( name, val )
            when "batchmode" then
                do_boolean( name, "BatchMode", val )
            when "bindaddress" then
                do_text( "BindAddress", val )
            when "challengeresponseauthentication" then
                do_boolean( name, "ChallengeResponseAuthentication", val )
            when "checkhostip" then
                do_boolean( name, "CheckHostIP", val )
            when "cipher" then
                do_cipher( name, val )
            when "ciphers" then
                do_ciphers( name, val )
            when "clearallforwardings" then
                do_boolean( name, "ClearAllForwardings", val )
            when "compression" then
                do_boolean( name, "Compression", val )
            when "compressionlevel" then
                do_integer_range( name, "CompressionLevel", val, 1, 9 )
            when "connectionattempts" then
                do_integer( name, "ConnectionAttempts", val )
            when "connecttimeout" then
                do_integer( name, "ConnectTimeout", val )
            when "controlmaster" then
                do_controlmaster( name, val )
            when "controlpath" then
                do_text( "ControlPath", val )
            when "dynamicforward" then
                do_text( "DynamicForward", val )
            when "enablesshkeysign" then
                do_boolean( name, "EnableSSHKeysign", val )
            when "escapechar" then
                do_text( "EscapeChar", val )
            when "exitonforwardfailure" then
                do_boolean( name, "ExitOnForwardFailure", val )
            when "forwardagent" then
                do_boolean( name, "ForwardAgent", val )
            when "forwardx11" then
                do_boolean( name, "ForwardX11", val )
            when "forwardx11trusted" then
                do_boolean( name, "ForwardX11Trusted", val )
            when "gatewayports" then
                do_boolean( name, "GatewayPorts", val )
            when "globalknownhostsfile" then
                do_text( "GlobalKnownHostsFile", val )
            when "gssapiauthentication" then
                do_boolean( name, "GSSAPIAuthentication", val )
            when "gssapikeyexchange" then
                do_boolean( name, "GSSAPIKeyExchange", val )
            when "gssapiclientidentity" then
                do_text( "GSSAPIClientIdentity", val )
            when "gssapidelegatecredentials" then
                do_boolean( name, "GSSAPIDelegateCredentials", val )
            when "gssapirenewalforcesrekey" then
                do_boolean( name, "GSSAPIRenewalForcesRekey", val )
            when "gssapitrustdns" then
                do_boolean( name, "GSSAPITrustDns", val )
            when "hashknownhosts" then
                do_boolean( name, "HashKnownHosts", val )
            when "hostbasedauthentication" then
                do_boolean( name, "HostbasedAuthentication", val )
            when "hostkeyalgorithms" then
                do_text( "HostKeyAlgorithms", val )
            when "hostkeyalias" then
                do_text( "HostKeyAlias", val )
            when "hostname" then
                do_text( "Hostname", val )
            when "identitiesonly" then
                do_boolean( name, "IdentitiesOnly", val )
            when "identityfile" then
                do_text( "IdentityFile", val )
            when "kbdinteractiveauthentication" then
                do_boolean( name, "KbdInteractiveAuthentication", val )
            when "kbdinteractivedevices" then
                do_kbdinteractivedevices( name, val )
            when "localcommand" then
                do_text( "LocalCommand", val )
            when "localforward" then
                do_text( "LocalForward", val )
            when "loglevel" then
                do_loglevel( name, val )
            when "macs" then
                do_text( "MACs", val )
            when "nohostauthenticationforlocalhost" then
                do_boolean( name, "NoHostAuthenticationForLocalhost", val )
            when "numberofpasswordprompts" then
                do_integer( name, "NumberOfPasswordPrompts", val )
            when "passwordauthentication" then
                do_boolean( name, "PasswordAuthentication", val )
            when "permitlocalcommand" then
                do_boolean( name, "PermitLocalCommand", val )
            when "pkcs11provider" then
                do_text( "PKCS11Provider", val )
            when "port" then
                do_integer( name, "Port", val )
            when "preferredauthentications" then
                do_text( "PreferredAuthentications", val )
            when "protocol" then
                do_integer_range( name, "Protocol", val, 1, 2 )
            when "proxycommand" then
                do_text( "ProxyCommand", val )
            when "pubkeyauthentication" then
                do_boolean( name, "PubkeyAuthentication", val )
            when "rekeylimit" then
                do_text( "RekeyLimit", val )
            when "remoteforward" then
                do_text( "RemoteForward", val )
            when "rhostsrsaauthentication" then
                do_boolean( name, "RhostsRSAAuthentication", val )
            when "rsaauthentication" then
                do_boolean( name, "RSAAuthentication", val )
            when "sendenv" then
                do_sendenv( name, val )
            when "serveralivecountmax" then
                do_integer( name, "ServerAliveCountMax", val )
            when "serveraliveinterval" then
                do_integer( name, "ServerAliveInterval", val )
            when "stricthostkeychecking" then
                do_strickthostkeychecking( name, val )
            when "stricthostkeychecking" then
                do_boolean( name, "StrictHostKeyChecking", val )
            when "tcpkeepalive" then
                do_boolean( name, "TCPKeepAlive" )
            when "tunnel" then
                do_tunnel( name, val )
            when "tunneldevice" then
                do_text( "TunnelDevice", val )
            when "useblacklistedkeys" then
                do_boolean( name, "UseBlackListedKeys", val )
            when "useprivilegeport" then
                do_boolean( name, "UsePrivilegePort", val )
            when "user" then
                do_text( "User", val )
            when "userknownhostsfile" then
                do_text( "UserKnownHostsFile", val )
            when "verifyhostkeydns" then
                do_verifyhostkeydns( name, val )
            when "visualhostkey" then
                do_boolean( name, "VisualHostKey", val )
            when "xauthlocation" then
                do_text( "XAuthLocation", val )
            else
                "    # Puppet has encountered an unknown option: " + var + "\n"
        end
        result += config_line
    end
    return result
end

### err_quit - Helper function to display an error message and fail
def err_quit(name,text)
    message = "ERROR: Host[" + name + "]: "
    message = message + text
    scope.function_fail( message )
end
-%>
#
# Custom Host blocks
#
<%
host.sort.map do |string,data|
    if ( string == "*" ) then
        next
    end
-%>
Host <%= string %>
<%= process_config_hash(string, data) %>
<% end -%>
#
# Default Host block
#
<%
# We'll set the default cipher list if one wasn't provided
if ! host["*"].has_key?("ciphers") 
    host["*"]["ciphers"] = [ 'aes256-ctr', 'aes192-ctr', 'aes128-ctr' ]
end
-%>
Host *
<% if host["*"] -%>
<%= process_config_hash("*", host["*"]) %>
<% else -%>
    Ciphers aes256-ctr,aes192-ctr,aes128-ctr
    ForwardX11 no
    Protocol 2
<% end %>
